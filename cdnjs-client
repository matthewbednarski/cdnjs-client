#!/bin/bash

##########
#
# parameters:
#     conf: (required) points a cdnjs-client.json file; eg. [cdnjs-client.json](https://gist.github.com/matthewbednarski/30dd4b65221a8c8c67ee)
#
# requires: jq, wget
#
##########
	
SWITCH="\e["
NORMAL="${SWITCH}0m"
YELLOW="${SWITCH}33m"
RED="${SWITCH}31m"
GREEN="${SWITCH}32m"
BLUE="${SWITCH}34m"
	
function warn {
	echo -e $YELLOW$@$NORMAL
}
function info {
	echo -e $BLUE$@$NORMAL
}
function green {
	echo -e $GREEN$@$NORMAL
}
function error {
	echo -e $RED$@$NORMAL
}


search_with_version () {
	local srch="$1"
	local vrs="$2"
    output=$(wget -qO- https://api.cdnjs.com/libraries\?search\=$srch\&fields\=version,assets )
    item=$(echo "$output" | jq  --arg name "$srch" --arg vers "$vrs" '.results[] | select( .name == $name ) |   { (.name) : {  version: $vers, files :  .assets[] | select( .version == $vers ) | .files  } }')
    ret=$? 
    echo $item | jq '.'
    return $ret
}
###
# Select all results and put together an object composed of :
#   name       .name
#   version    .version
#   files      .assets[1].files   -> selects files of latest version
###
search_without_version () {
	local srch="$1"
    output=$(wget -qO- https://api.cdnjs.com/libraries\?search\=\"$srch\"\&fields\=version,assets )
	item=$(echo "$output" | jq  --arg name "$srch" '.results[] | select( .name == $name) | { (.name) : { version, files :  .assets[1].files } }')
    ret=$? 
    echo -e "$item" | jq '.'
    return $ret
}

function get_resolved {
	local save_dir_dest="$2"
	local save_dir="$tmpdir/$2"
	local save_file="$save_dir"/$1
	# echo $save_file_tmp
	local fetch_url="$3"
	if [[ ! -d "$save_dir" ]]; then
		mkdir -p "$save_dir"
	fi
	if [[ -f "$save_file" ]]; then
		rm -Rf "$save_file"
	fi
	info "Fetching $RED$1$BLUE to $GREEN$save_dir$BLUE"
	# echo -e $GREEN
	wget -q -O "$save_file" $fetch_url
	# echo -e $NORMAL
	local ret=$?
	if [[ "$ret" != "0" ]]; then
		error "Could not download file $BLUE$1" 
	else
		info "Success"
	fi
	return $ret
}
function get {
	local name=$1
	local version=$2 
	local asset_dir=$(dirname $3)
	local asset_file=$(basename $3)
	local file="$3"
	local save_dir=
	local fetch_url=

	if [[ "$asset_dir" != "." ]]; then
		local save_dir=$dir/$name/$version/$asset_dir
		local fetch_url=$url/$name/$version/$file
	else
		local save_dir=$dir/$name/$version
		local fetch_url=$url/$name/$version/$file
	fi

	get_resolved "$asset_file" "$save_dir" "$fetch_url"
	return $?
}

function processFiles {
	local files="$1"
	oifs=$IFS
	IFS=$'\n'
	local ret=1
	for fileObj in $files; do
		warn "Custom location"
		local t_outpath=$(echo $fileObj | jq -r '.outpath')
		local t_file=$(echo $fileObj | jq -r '.file')
		local t_url=$(echo $fileObj | jq -r '.url')
		get_resolved "$t_file" "$dir/$t_outpath" $t_url
		ret=$?
		if [[ "$ret" != "0" ]]; then
			break
		fi
	done
	IFS=$oifs
	return $ret
}

function get_assets {
	get $@
	return $?
}

search-cdnjs (){
	local results=$(wget -qO- https://api.cdnjs.com/libraries\?search\=$@\&fields\=version,description | jq -r '.results')
	echo -n $results
}

sync-files () {
	conf=$1
	shift
	
	tmpdir=$(mktemp -d -t)
	ret=0
	loop=0
	repos=$(jq -r '. as $in| keys[]' $conf)
	for repo in $repos; do
		cdn=$(jq .$repo $conf)
		url=$(echo $cdn | jq -r .root)
		dir=$(echo $cdn | jq -r '.["relative-location"]')
		deps=$(echo $cdn | jq -r .dependencies)
		keys=$(echo $deps | jq -r '. as $in| keys[]')
		if [[ "$loop" != "0" ]]; then
			echo -e
		fi
		((loop++))
		green "Repo: $BLUE$repo$NORMAL"
		green "Url: $BLUE$url$NORMAL"
		echo -e
		for d in $keys; do
			lib=$d
			part=$(echo $deps | jq -r '.["'$d'"]')
			version=$(echo $part | jq -r '.["version"]')
			assets=$(echo $part | jq -r '.["files"]?')

			create_assets_dir=false
			assetsA=
			if [[ "$assets" == "null" ]]; then
				create_assets_dir=false
			else
				assetsAFiles=$(echo $assets | jq -r -c '.. | select(has("file")?)')
				assetsA=$(echo $assets | jq -r '.[] | select( type == "string") ')
			fi
			if [[ "" != "$assetsAFiles" ]]; then
				processFiles "$assetsAFiles"
				ret=$?
			fi
			if [[ "$ret" != "0" ]]; then
				break
			fi
			for _assets in $assetsA; do
				get_assets "$lib" "$version" "$_assets" 
				ret=$?
				if [[ "$ret" != "0" ]]; then
					break
				fi
			done
			if [[ "$ret" != "0" ]]; then
				break
			fi
		done
		if [[ "$ret" != "0" ]]; then
			break
		fi
	done
	if [[ "$ret" != "0" ]]; then
		error "Exiting with status code $ret"
		/bin/rm -Rf $tmpdir
	else
		info "Copying from temp directory $tmpdir"
		/bin/cp -Rf $tmpdir/* .
		ret=$?
		if [[ "$ret" == "0" ]]; then
			info "Deleting temp directory $tmpdir"
			/bin/rm -Rf $tmpdir
		fi
	fi
	return $ret
}
clean () {
	locations=$(jq -r -c '.. | select(has("relative-location"?))["relative-location"]' "$conf")
	oifs=$IFS
	IFS=$'\n'
	for d in $locations; do
		if [[ -d "$d" ]]; then
			echo -e $BLUE'Cleaning dir '$d'.'$NORMAL
			rm -Rf "$d"
		else
			echo -e $RED'Dir '$d' does not exist.'$NORMAL
		fi
	done
	IFS=$oifs
	return $?
}


unset DO_SEARCH DO_CLEAN DO_SYNC DO_HELP DO_ADD HAS_CONF CONF
while [[ $1 ]]; do
	case "$1" in
		--conf)                             if [[ -f "$2" ]]; then HAS_CONF=1; CONF="$2"; shift; fi;;
		-f|--search|search|--find|find)     DO_SEARCH=1;;
		-c|--clean|clean)                   DO_CLEAN=1;;
		-s|--sync|sync)                     DO_SYNC=1;;
		-a|--add|add|+)                     DO_ADD=1;;
		-h|-\?|--help|help)                  DO_HELP=1;;
		*)                                  if [[ "$ARGS" == "" ]]; then ARGS="$1"; else ARGS="$ARGS $1"; fi;
	esac
	shift
done

usage (){
	echo -e "Usage: $(basename ${BASH_SOURCE[0]}) [OPTIONS] [ARGS]:"
	echo -e
	echo -e "    --conf [CONFIG FILE]            use a custom config file"
	echo -e "    --search, search [ARGS]         perform query on api.cdnjs.com"
	echo -e "    -f, --find, find [ARGS]         same as \"--search [ARGS]\""
	echo -e "    -c, --clean, clean [ARGS]       clean configured relative-location"
	echo -e "    -s, --sync, sync [ARGS]         syncronize to configured relative-locations"
	echo -e "    -a, + [LIB[+VERSION]] [GROUP]   add library with optional version to optional group"
	echo -e "    --add, add                      same as \"--add\""
	echo -e "    -h, -?, --help, help            print usage"
}
if (( ! HAS_CONF )); then
	CONF='.cdnjs-conf'
	info using default config: $CONF
fi
if (( DO_HELP )); then
	usage
	exit 0
fi

(( ! DO_SYNC && ! DO_SEARCH && ! DO_CLEAN  && ! DO_ADD )) && DO_SYNC=1
(( DO_SYNC || DO_CLEAN )) && unset DO_SEARCH
if (( DO_SYNC || DO_CLEAN )) && [[ ! -f "$ARGS" ]]; then
	error "A cdnjs-client configuration file is required!"
	exit 1
fi
if [[ "$DO_CLEAN" == "1" ]] && [[ -f "$CONF" ]]; then
	info "CLEANING file $CONF"
	clean "$CONF"
	fret=$?
	if [[ "$fret" != "0" ]]; then
		error "Cleaning was not successful"
		exit $fret
	fi
fi
if [[ "$DO_SYNC" == "1" ]] && [[ -f "$CONF" ]]; then
	info "SYNCING file $CONF"
	sync-files "$CONF"
	exit $?
fi
(( DO_SEARCH  )) && unset DO_SYNC
if (( $DO_SEARCH )); then
	info "SEARCHING for $ARGS"
	res=$(search-cdnjs "$ARGS")
	fret=$?
	echo $res | jq '.'
	exit $fret
fi

if (( $DO_ADD )); then
	info "ADDING $ARGS"
	
    param="$ARGS"
    search="${param%+*}"
    version="${param#*+}"
    
    unset HAS_VERS
    if [[ "$param" != "$search" ]]; then
    	HAS_VERS=1
    fi
	tmpconf=$(mktemp )
    if (( HAS_VERS )); then
    	echo $HAS_VERS
		val=$(search_with_version "$search" "$version")
		val=$(jq --argjson val "$val" --arg key "$search" '. as $rr | $rr |  $rr.cdnjs.dependencies=( $rr.cdnjs.dependencies + $val ) | .' "$CONF" )
		fret=$?
    else
    	echo $HAS_VERS
		val=$(search_without_version "$search" )
		val=$(jq --argjson val "$val" --arg key "$search" '. as $rr | $rr |  $rr.cdnjs.dependencies=( $rr.cdnjs.dependencies + $val ) | .' "$CONF")
		fret=$?
    fi
    if [[ "$fret" == "0" ]]; then 
		echo $val | jq '.' > $tmpconf
		fret=$?
    	if [[ "$fret" == "0" ]]; then 
    		mv "$tmpconf" "$CONF"
    		fret=$?
    		if [[ "$fret" != "0" ]]; then 
    			rm $tmpconf
			fi
		fi
	fi
	exit $fret
fi
