#!/bin/bash

##########
#
# parameters:
#     conf: (required) points a cdnjs-client.json file; eg. [cdnjs-client.json](https://gist.github.com/matthewbednarski/30dd4b65221a8c8c67ee)
#
# requires: jq, curl #
##########
	
unset DO_MKDIR DO_MSGFMT HAS_MSGFMT
#set -x
dir=$(cd $(dirname ${BASH_SOURCE[0]}); pwd)
ret=$( which msgfmt 2>/dev/null )
ret=$?
if [[ "$ret" == "0" ]]; then
	HAS_MSGFMT=1
fi
if (( HAS_MSGFMT )) ; then
    if [[ "$TEXTDOMAINDIR" == "" ]]; then
        export TEXTDOMAINDIR=$dir/locale
        if [[ ! -d "$TEXTDOMAINDIR" ]]; then
			if [[ -f "$dir/i18n/$(basename ${BASH_SOURCE[0]}).$LANGUAGE.po" ]]; then
                DO_MKDIR=1
			fi
        elif [[ ! -d "$TEXTDOMAINDIR/$LANGUAGE/LC_MESSAGES" ]]; then
			if [[ -f "$dir/i18n/$(basename ${BASH_SOURCE[0]}).$LANGUAGE.po" ]]; then
                DO_MKDIR=1
		    fi
		fi
        if [[ ! -f "$TEXTDOMAINDIR/$LANGUAGE/LC_MESSAGES/$(basename ${BASH_SOURCE[0]}).mo" ]]; then
			if [[ -f "$dir/i18n/$(basename ${BASH_SOURCE[0]}).$LANGUAGE.po" ]]; then
                DO_MSGFMT=1
	        fi
        fi
    fi
fi
export TEXTDOMAIN=cdnjs
if (( HAS_MSGFMT )) ; then
    if (( DO_MKDIR )); then
        mkdir -p "$TEXTDOMAINDIR/$LANGUAGE/LC_MESSAGES"
    fi
    if (( DO_MSGFMT )); then
        msgfmt -o "$TEXTDOMAINDIR/$LANGUAGE/LC_MESSAGES/$(basename ${BASH_SOURCE[0]}).mo" "$dir/i18n/$(basename ${BASH_SOURCE[0]}).$LANGUAGE.po"
    fi
fi

unset DO_INIT DO_INDEX DO_SEARCH DO_CLEAN \
	  DO_SYNC DO_HELP DO_ADD DO_VERBOSE \
	  DO_REMOVE \
	  HAS_CONF CONF \
	  NO_COLOR \
	  IS_DEV NO_DEV

while [[ $1 ]]; do
	case "$1" in
		--conf)                             if [[ "$2" != "" ]]; then HAS_CONF=1; CONF="$2"; shift; fi;;
		--init|init)                        DO_INIT=1;;
		--index|index)                      DO_INDEX=1;;
		--html|html)                        DO_INDEX=1;;
		--nodev|nodev)                      NO_DEV=1;;
		--dev|dev)                          IS_DEV=1;;
		-v|--verbose|verbose)               DO_VERBOSE=1;;
		--debug|debug)                      DO_VERBOSE=1;;
		-f|--search|search|--find|find)     DO_SEARCH=1;;
		-c|--clean|clean)                   DO_CLEAN=1;;
		-s|--sync|sync|update)              DO_SYNC=1;;
		--update|update)                    DO_SYNC=1;;
		-a|--add|add|+)                     DO_ADD=1;;
		-i|--install|install)               DO_ADD=1; DO_SYNC=1;;
		-d|--delete|delete)                 DO_REMOVE=1;;
		--remove|remove)                    DO_REMOVE=1;;
		--nocolor|nocolor)                  NO_COLOR=1;;
		-h|-\?|--help|help)                 DO_HELP=1;;
		*)                                  if [[ "$ARGS" == "" ]]; then ARGS="$1"; else ARGS="$ARGS $1"; fi;
	esac
	shift
done

SWITCH="\e["
NORMAL="${SWITCH}0m"
YELLOW="${SWITCH}33m"
RED="${SWITCH}31m"
GRN="${SWITCH}32m"
BLU="${SWITCH}34m"
	
function debug {
	if (( DO_VERBOSE )); then
		local text="$(gettext "$@")"
		local ret=$(echo $text | grep "gettext:" ; echo $?)
		if [[ "$ret" != "0" ]];then
			text="$@"
		fi
		if (( NO_COLOR )); then
			echo -e "$text"
		else
			echo -e "$YELLOW"$text"$NORMAL"
		fi
	fi
}
function warn {
	if (( NO_COLOR )); then
		echo -e "$(gettext "$@")"
	else
		echo -e "$YELLOW$(gettext "$@")$NORMAL"
	fi
}
function info {
	if (( NO_COLOR )); then
		echo -e "$(gettext "$@")"
	else
		echo -e "$(gettext "$@")$NORMAL"
	fi
}
function green {
	if (( NO_COLOR )); then
		echo -e "$(gettext "$@")"
	else
		echo -e "$GRN$(gettext "$@")$NORMAL"
	fi
}
function error {
	if (( NO_COLOR )); then
		echo -e "$(gettext "$@")" >&2
	else
		echo -e "$RED$(gettext "$@")$NORMAL" >&2
	fi
}

list_includes () {
	local conf="$1"
	local path_to_index="$2"
	local processed=$(jq  '
	[ . as $r  
		| keys[] | . as $key 
		| $r[$key] as $section
		| $section.dependencies as $dep
		| $dep 
		| keys[] as $depkey 
		| $dep[$depkey] as $library
		| $library 
		| $library.files as $files
		| $library 
		| (if has("version")  then
			 $section["relative-location"] | (.) + "/" as $rl 
			 | $rl + $depkey + "/" + $library.version + "/" as $rdl 
			 | $rdl 
		else
			 $section["relative-location"] | (.) + "/" as $rl 
			 | $rl + $depkey + "/" as $rdl 
			 | $rdl 
		 end ) as $rdl
		| { path: $rdl, files: $files}  | .
	] 
	' "$conf")
	tret=$?
	if [[ "$tret" == "0" ]] && [[ "$processed" != "" ]]; then
		debug "    extracting list of link and script tags"
		# echo $processed | jq .
		local list=$(echo "$processed" | jq '.[] as $all | $all | .files[] as $list | .path as $path | $list | . |  $path + strings , $path + objects.outpath + "/" + objects.file ')
		if (( IS_DEV )); then
			if (( NO_COLOR )); then
				debug "Excluding min's from list!"
			else
				debug "Excluding$RED min's$YELLOW from list!"
			fi
			if [[ "$path_to_index" != "" ]]; then
				local css_files=$(echo "$list" | grep -v "\.min\." | grep "\.css" | sed "s|$path_to_index||g")
				local js_files=$(echo "$list" | grep -v "\.min\." | grep "\.js" | sed "s|$path_to_index||g")
			else
				local css_files=$(echo "$list" | grep -v "\.min\." | grep "\.css" )
				local js_files=$(echo "$list" | grep -v "\.min\." | grep "\.js" )
			fi
		elif (( NO_DEV )); then
			if (( NO_COLOR )); then
				debug "Listing min's only!"
			else
				debug "Listing$RED min's$YELLOW only!"
			fi
			if [[ "$path_to_index" != "" ]]; then
				local css_files=$(echo "$list" | grep "\.min\." | grep "\.css" | sed "s|$path_to_index||g")
				local js_files=$(echo "$list" | grep "\.min\." | grep "\.js" | sed "s|$path_to_index||g")
			else
				local css_files=$(echo "$list" | grep "\.min\." | grep "\.css" )
				local js_files=$(echo "$list" | grep "\.min\." | grep "\.js" )
			fi
		else
			if (( NO_COLOR )); then
				debug "Listing all available js's and css's!"
				debug "    Use --dev or --nodev flags for managing minified output"
			else
				debug "Listing$RED all$YELLOW available$RED js's$YELLOW and$RED css's$YELLOW!"
				debug "    Use $RED--dev$YELLOW or $RED--nodev$YELLOW flags for managing minified output"
			fi
			if [[ "$path_to_index" != "" ]]; then
				local css_files=$(echo "$list" | grep "\.css" | sed "s|$path_to_index||g")
				local js_files=$(echo "$list" | grep "\.js" | sed "s|$path_to_index||g")
			else
				local css_files=$(echo "$list" | grep "\.css" )
				local js_files=$(echo "$list" | grep "\.js" )
			fi
		fi
		for cssf in $css_files; do
			echo "<link rel=\"stylesheet\" href=$cssf />"
		done
		for jsf in $js_files; do
			echo "<script src=$jsf ></script>"
		done
		tret=0
	fi
	return $tret
}

init_cdnjs () {
	local conf="$1"
	local contents=$(echo "{}" | jq '. as $r | $r.cdnjs={root:"https://cdnjs.cloudflare.com/ajax/libs", "relative-location" : "libs", dependencies: {} } |  .')
	debug "$(echo $contents | jq '.')"
    local ret=$? 
    if [[ "$?" == "0" ]]; then
		dir=$(dirname "${conf}")
    	if [[ ! -d "$dir" ]]; then
    		debug "Creating directory $dir"
    		mkdir -p "$dir"
			ret=$?
    		if [[ "$ret" == "0" ]]; then
    			info "Writing to $conf"
				echo "$contents" > "$conf"
				ret=$?
			fi
		else
        	info "Writing to $conf"
	    	echo "$contents" > "$conf"
	    	ret=$?
		fi
	fi
    return $ret
}

search_with_version () {
	local srch="$1"
	local vrs="$2"
	local output=
	if (( DO_VERBOSE )); then
		output=$(echo "$(curl -X GET "https://api.cdnjs.com/libraries?search=$srch\&fields=version,assets" )" | jq -r '.' )
	else
		output=$(echo "$(curl -s -X GET "https://api.cdnjs.com/libraries?search=$srch\&fields=version,assets" )" | jq -r '.' )
	fi
    local item=$(echo "$output" | jq  --arg name "$srch" --arg vers "$vrs" '.results[] | select( .name == $name ) |   { (.name) : {  version: $vers, files :  .assets[] | select( .version == $vers ) | .files  } }')
    local ret=$? 
    echo $item | jq '.'
    return $ret
}
###
# Select all results and put together an object composed of :
#   name       .name
#   version    .version
#   files      .assets[0].files   -> selects files of latest version
###
search_without_version () {
	local srch="$1"
	local output=
	if (( DO_VERBOSE )); then
		output=$(echo "$(curl -X GET "https://api.cdnjs.com/libraries?search=$srch\&fields=version,assets" )" | jq -r '.' )
	else
		output=$(echo "$(curl -s -X GET "https://api.cdnjs.com/libraries?search=$srch\&fields=version,assets" )" | jq -r '.' )
	fi
	local item=$(echo "$output" | jq  --arg name "$srch" '.results[] | select( .name == $name) | { (.name) : { version, files :  .assets[0].files } }')
    local ret=$? 
    echo -e "$item" | jq '.'
    return $ret
}

function get_resolved {
	local save_dir_dest="$2"
	local save_dir="$tmpdir/$2"
	local save_file="$save_dir"/$1
	local fetch_url="$3"
	if [[ ! -d "$save_dir" ]]; then
		mkdir -p "$save_dir"
	fi
	if [[ -f "$save_file" ]]; then
		rm -Rf "$save_file"
	fi
	if (( DO_VERBOSE )); then
		if (( NO_COLOR )); then
			info "Fetching $1 to $save_dir"
			info from $fetch_url
		else
			info "Fetching $RED$1$NORMAL to $RED$save_dir"
			info from $GRN$fetch_url
		fi
		curl "$(echo $fetch_url)" -o "$save_file" 
	else
		if (( NO_COLOR )); then
			info "Fetching $1"
		else
			info "Fetching $RED$1"
		fi
		curl -s "$(echo $fetch_url)" -o "$save_file" 
	fi
	local ret=$?
	if [[ "$ret" != "0" ]]; then
		error "Could not download file $1" 
	else
		info "Success"
	fi
	return $ret
}
function get {
	local name=$1
	local version=$2 
	local asset_dir=$(dirname $3)
	local asset_file=$(basename $3)
	local file="$3"
	local save_dir=
	local fetch_url=

	if [[ "$asset_dir" != "." ]]; then
		local save_dir=$dir/$name/$version/$asset_dir
		local fetch_url=$url/$name/$version/$file
	else
		local save_dir=$dir/$name/$version
		local fetch_url=$url/$name/$version/$file
	fi

	get_resolved "$asset_file" "$save_dir" "$fetch_url"
	return $?
}

function processFiles {
	local files="$1"
	oifs=$IFS
	IFS=$'\n'
	local ret=1
	for fileObj in $files; do
		warn "Custom location"
		local t_outpath=$(echo $fileObj | jq -r '.outpath')
		local t_file=$(echo $fileObj | jq -r '.file')
		local t_url=$(echo $fileObj | jq -r '.url')
		get_resolved "$t_file" "$dir/$t_outpath" $t_url
		ret=$?
		if [[ "$ret" != "0" ]]; then
			break
		fi
	done
	IFS=$oifs
	return $ret
}
function get_assets { get $@
	return $?
}

search-cdnjs (){
	local results=$(curl -X GET "https://api.cdnjs.com/libraries?search=$@\&fields=version,description,assets" | jq -r '.results')
	echo -n $results
}

sync-files () {
	conf="$1"
	shift
	
	tmpdir=$(mktemp -d -t)
	ret=0
	loop=0
	repos=$(jq -r '. as $in| keys[]' "$conf" | sed :)
	for repo in $repos; do
		debug "$repo"
		cdn=$(jq -r --arg rep "$repo" '.[($rep)]' "$conf")
		url=$(echo "$cdn" | jq -r '.root')
		dir=$(echo "$cdn" | jq -r '.["relative-location"]')
		deps="$(echo "$cdn" | jq -r '.dependencies')"
		keys=$(echo "$deps" | jq -r '. as $in| keys[]')
		if [[ "$loop" != "0" ]]; then
			echo -e
		fi
		((loop++))
		if (( NO_COLOR )); then
			green "Repo: $repo"
			green "Url: $url"
		else
			green "Repo: $BLU$repo$NORMAL"
			green "Url: $BLU$url$NORMAL"
		fi
		echo -e
		for d in $keys; do
			lib=$d
			part="$(echo "$deps" | jq -r --arg depk "$(echo $lib)" '.[($depk)]')"
			version="$(echo "$part" | jq -r '.["version"]')"
			assets="$(echo "$part" | jq -r '.["files"]?')"

			create_assets_dir=false
			assetsA=
			if [[ "$assets" == "null" ]]; then
				create_assets_dir=false
			else
				assetsAFiles="$(echo $assets | jq -r -c '.. | select(has("file")?)')"
				assetsA="$(echo $assets | jq -r '.[] | select( type == "string") ')"
			fi
			if [[ "" != "$assetsAFiles" ]]; then
				processFiles "$assetsAFiles"
				ret=$?
			fi
			if [[ "$ret" != "0" ]]; then
				break
			fi
			for _assets in $assetsA; do
				debug "$(echo $lib)" "$version" "$_assets" 
				get_assets "$(echo $lib)" "$version" "$_assets" 
				ret=$?
				if [[ "$ret" != "0" ]]; then
					break
				fi
			done
			if [[ "$ret" != "0" ]]; then
				break
			fi
		done
		if [[ "$ret" != "0" ]]; then
			break
		fi
	done
	if [[ "$ret" != "0" ]]; then
		error "Exiting with status code $ret"
		/bin/rm -Rf $tmpdir
	else
		info "Copying from temp directory $tmpdir"
		/bin/cp -Rf $tmpdir/* .
		ret=$?
		if [[ "$ret" == "0" ]]; then
			info "Deleting temp directory $tmpdir"
			/bin/rm -Rf $tmpdir
		fi
	fi
	return $ret
}
clean () {
	local conf="$1"
	local locations=$(jq -r -c '.. | select(has("relative-location"?))["relative-location"]' "$conf")
	local oifs=$IFS
	local ret=
	locations="$(echo "$locations" | tr '\r\n' '\n' | tr '\n' ' ')"
	locations="$(echo "$locations" | xargs -n1 | sort | uniq)"
	debug "$locations"
	IFS=$'\r\n'
	for d in $locations; do
		if [[ -d "$d" ]]; then
			info 'Cleaning directory '$d'.'
			rm -Rf "$d"
			ret=$?
			if (( DO_VERBOSE )) && [[ "$ret" != "0" ]]; then
				debug "Could not delete $d"
			else
				debug "Successfully deleted $d"
			fi
		else
			error 'Dir '$d' does not exist.'
		fi
	done
	IFS=$oifs
	return $ret
}



usage (){
	info "Usage: $(basename ${BASH_SOURCE[0]}) [OPTIONS] [ARGS]:"
	echo -e
	info "    Options:"
	info "    --init, init                     initialize a config file"
	info "    --conf [CONFIG FILE]             use a custom config file"
	info "    --index, index [p/to/exclude]    prints a list of link and script tags"
	info "    --html, html   [p/to/exclude]    same as \"--index\""
	echo -e
    info "    --nodev, nodev                   excludes non '.min.*' files; a flag for \"--list\""
    info "    --dev, dev                       excludes '.min.*' files; a flag for \"--list\""
	echo -e
	info "    -f, --find, find [ARGS]          perform query on api.cdnjs.com"
	info "        --search, search [ARGS]      same as \"--search [ARGS]\""
	info "    -c, --clean, clean [ARGS]        clean configured relative-location"
	info "    -s, --sync, sync [ARGS]          syncronize to configured relative-locations"
	info "        --update, update [ARGS]      same as \"--sync [ARGS]\""
	info "    -a, + [LIB[+VERSION]] [GROUP]    add library with optional version to optional group"
	info "        --add, add                   "
	info "    -i, --install, install [LIB]     same as \"add\" plus \"sync\""
	info "    -d, --delete, delete [LIB]       removes library from configuaration"
	info "    --remove, remove [LIB]           same as \"delete\""
	echo -e
	info "    -v, --verbose, verbose           print debug/verbose output"
	info "        --debug, debug               same as \"--verbose\""
	info "        --nocolor, nocolor           do not output in color, useful for logging stdout/stderr"
	info "    -h, -?, --help, help             print usage"
}
if (( ! HAS_CONF )); then
	CONF='.cdnjs'
	debug "using default config: $CONF"
fi
if (( DO_HELP )); then
	usage
	exit 0
fi
if (( DO_INDEX )); then
	if (( NO_COLOR )); then
		debug "Listing script and link tags from $CONF"
	else
		debug "Listing script and link tags from $RED$CONF"
	fi
	list_includes "$CONF" "$ARGS"
	fret=$?
	exit $fret
fi
if (( DO_INIT )); then
	if (( NO_COLOR )); then
		debug "Initializing config file $CONF"
	else
		debug "Initializing config file $RED$CONF"
	fi
	init_cdnjs "$CONF"
	fret=$?
	exit $fret
fi

(( ! DO_SYNC && ! DO_SEARCH && ! DO_CLEAN  && ! DO_ADD && ! DO_REMOVE  )) && DO_SYNC=1
(( DO_SYNC || DO_CLEAN )) && unset DO_SEARCH
if (( DO_SYNC || DO_CLEAN )) && [[ ! -f "$CONF" ]]; then
	error "A cdnjs-client configuration file is required!"
	exit 1
fi
if (( DO_CLEAN )) && [[ -f "$CONF" ]]; then
	if (( NO_COLOR )); then
		debug "CLEANING file $CONF"
	else
		debug "CLEANING file $RED$CONF"
	fi
	clean "$CONF"
	fret=$?
	if [[ "$fret" != "0" ]]; then
		error "Cleaning was not successful"
		exit $fret
	else
		debug "Successfully cleaned 'relative-location's"
	fi
fi
(( DO_SEARCH  )) && unset DO_SYNC
if (( DO_SEARCH )); then
	if (( NO_COLOR )); then
		debug "SEARCHING for $ARGS"
	else
		debug "SEARCHING for $RED$ARGS"
	fi
	res=$(search-cdnjs "$ARGS")
	fret=$?
	echo $res | jq '.'
	exit $fret
fi

if (( DO_ADD )); then
    param="$ARGS"
    search="${param%+*}"
    version="${param#*+}"
	debug "ADDING library $search"
    
    unset HAS_VERS
    if [[ "$param" != "$search" ]]; then
    	HAS_VERS=1
    fi
	tmpconf=$(mktemp )
    if (( HAS_VERS )); then
		val=$(search_with_version "$search" "$version")
		tret=$?
		if [[ "$val" == "" ]]; then
			if (( NO_COLOR )); then
				error "no assets found for the library: $search, version: $version"
			else
				error "no assets found for the library: $GRN$search$RED, version: $GRN$version"
			fi
			fret=1
		else
			if [[ "$tret" == "0" ]]; then
				if (( NO_COLOR )); then
					info "Adding $search version: $(echo "$val" | jq -r --arg key "$search" '.[( $key )].version')"
				else
					info "Adding $search version: $RED $(echo "$val" | jq -r --arg key "$search" '.[( $key )].version')"
				fi
			fi
			debug "val=$val"
			valfin=$(jq --argjson val "$val" --arg key "$search" '. as $rr | $rr |  $rr.cdnjs.dependencies=( $rr.cdnjs.dependencies + $val ) | .' "$CONF" )
			fret=$?
		fi
    else
		val=$(search_without_version "$search" )
		tret=$?
		if [[ "$val" == "" ]]; then
			error "no assets found for the library: $GRN$search"
			fret=1
		else
			if [[ "$tret" == "0" ]]; then
				if (( NO_COLOR )); then
					info "Adding $search version: $(echo "$val" | jq -r --arg key "$search" '.[( $key )].version')"
				else
					info "Adding $search version: $RED$(echo "$val" | jq -r --arg key "$search" '.[( $key )].version')"
				fi
			fi
			debug "val=$val"
			valfin=$(jq --argjson val "$val" --arg key "$search" '. as $rr | $rr |  $rr.cdnjs.dependencies=( $rr.cdnjs.dependencies + $val ) | .' "$CONF")
			fret=$?
		fi
    fi
    if [[ "$fret" == "0" ]]; then 
		echo $valfin | jq '.' > $tmpconf
		fret=$?
    	if [[ "$fret" == "0" ]]; then 
			if (( NO_COLOR )); then
    			info "Successfully updated cdnjs config $CONF"
    		else
    			info "Successfully updated$GRN cdnjs$BLU config $GRN$CONF$BLU"
			fi
    		mv "$tmpconf" "$CONF"
    		fret=$?
    		if [[ "$fret" != "0" ]]; then 
    			rm $tmpconf
			fi
		fi
	fi
	if [[ "$fret" != "0" ]]; then
		exit $fret
	fi
fi
is_danger_path (){
	local params="$@"
	echo "$params" | grep -E "\*|^\/"
	local ret=$?
	if [[ "$ret" != "0" ]]; then
		return 0
	fi
	return 1
}
if (( DO_REMOVE )) && [[ -f "$CONF" ]]; then
    param="$ARGS"
    lib="${param%+*}"
	debug "REMOVING library $lib"
	if [[ "$lib" == "" ]]; then
		if (( NO_COLOR )); then
			error "a library found as a dependency in $CONF is required"
		else
			error "a library found as a dependency in $GRN$CONF$RED is required"
		fi
		fret=1
	else
        prev=$(jq  --arg lib "$lib" '. as $root | $root | keys[] as $keys | $keys | . as $key | $key | select($root[$key].dependencies[$lib])?| $root[$key].dependencies[$lib] | .' "$CONF")
        if [[ "$prev" == "" ]]; then
			error "the library '$lib' is not a dependency in $CONF"
        	fret=1
		else
        	valfin=$(jq  --arg lib "$lib" '. as $root | $root | keys[] as $keys | $keys | . as $key | $key | select($root[$key].dependencies[$lib])? | . as $key | $root |  del( $root[$key].dependencies[$lib] )' "$CONF")
        	fret=$?
		fi
	fi
    if [[ "$fret" == "0" ]]; then 
    	# library exists so remove any synced files if found
		lib_fs_path=$(jq -r --arg lib "$lib" '. as $root | $root | keys[] as $keys | $keys | . as $key | $key | select($root[$key].dependencies[$lib])? | . as $key | $root | $root[$key]["relative-location"] + "/" +$lib' "$CONF" )
		if [[ -d "$lib_fs_path" ]]; then
			is_danger_path "$lib_fs_path"
			if [[ "$?" == "0" ]]; then
				info Cleaning directory "$lib_fs_path"
				/bin/rm -Rf "$lib_fs_path"
				fret=$?
			else
				warn "the path to delete, $lib_fs_path, contains potentially dangerous characters"
			fi
		fi
        if [[ "$fret" == "0" ]]; then 
			tmpconf=$(mktemp )
    		echo $valfin | jq '.' > $tmpconf
    		fret=$?
        	if [[ "$fret" == "0" ]]; then 
    			if (( NO_COLOR )); then
        			info "Successfully updated cdnjs config $CONF"
        		else
        			info "Successfully updated$GRN cdnjs$BLU config $GRN$CONF$BLU"
    			fi
        		mv "$tmpconf" "$CONF"
        		fret=$?
        		if [[ "$fret" != "0" ]]; then 
        			rm $tmpconf
    			fi
    		fi
    	fi
	fi
	if [[ "$fret" != "0" ]]; then
		exit $fret
	fi
fi
if (( DO_SYNC )) && [[ -f "$CONF" ]]; then
	if (( NO_COLOR )); then
		debug "SYNCING file $CONF"
	else
		debug "SYNCING file $RED$CONF"
	fi
	sync-files "$CONF"
fi
exit $?
